name: CI/CD for KocoHub

# Trigger workflow on push and pull requests to main branch
on:
  push:
    branches:
      - main  # Run on push to the 'main' branch
  pull_request:
    branches:
      - main  # Run on pull requests targeting the 'main' branch

jobs:
  test:
    strategy:
      matrix:
        python-version: ["3.13"] # Specify Python version(s) to test / BUT use the version in pyproject.toml
        os: [ubuntu-latest] # Specify OS environment (Ubuntu in this case)

    runs-on: ${{ matrix.os }}

    env:
      # Configure a constant location for the uv cache
      UV_CACHE_DIR: /tmp/.uv-cache

    services:
      db:
        image: postgres:15-alpine # Use PostgreSQL 15 with Alpine base image
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432

    steps:
      # Clone repository for access to codebase
      - name: Checkout Code
        uses: actions/checkout@v4

      # Configure Python environment with specified version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      # Set Environment Variables
      - name: Set Environment Variables
        run: |
          echo "DB_ENGINE=django.db.backends.postgresql" >> .env
          echo "DB_NAME=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DB_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env

      # Debug Python Path and Settings
      - name: Set PATH Variables for Django
        run: |
          echo "PYTHONPATH=$PWD/src" >> $GITHUB_ENV
          echo "DJANGO_SETTINGS_MODULE=config.settings" >> $GITHUB_ENV

      # Set up project dependencies using UV Astral
      - name: Install UV Astral
        uses: astral-sh/setup-uv@v5

      # Restore uv cache
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      # Sync dependencies with uv.lock
      - name: Sync Dependencies with uv.lock
        run: uv sync

      # Check code formatting
      - name: Run Black (Check Mode)
        run: uv run black --check .

      # Run code linting
      - name: Run Ruff
        run: uv run ruff check .

      # Check import ordering
      - name: Run isort (Check Mode)
        run: uv run isort --check-only .

      # Apply database migrations
      - name: Apply Migrations
        run: |
          export PYTHONPATH=$PWD/src
          export DJANGO_SETTINGS_MODULE=config.settings
          cd src
          uv run python manage.py migrate

      # Execute Django test suite
      - name: Run Tests
        run: |
          export PYTHONPATH=$PWD/src
          export DJANGO_SETTINGS_MODULE=config.settings
          cd src
          uv run pytest -v

      # Save uv cache
      - name: Minimize uv cache
        run: uv cache prune --ci
